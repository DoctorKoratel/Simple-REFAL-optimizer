$FORWARD FastGen-Terms, FastGen-MeN, FastGen-M, Check;

$LABEL Brackets, Atom, S, T, E;

$LABEL Alt;

$EXTERN EraseBr;

$ENTRY FastGen {
	/* 0. Тело функции состоит из одного предложения */
	(e.1) = (e.1);
	
	/* 1. Предложения являются термами; cтроим БО согласно таблице */
	(t.1) (t.2) e.Tail = <FastGen (<FastGen-Terms (t.1) (t.2)>) e.Tail>;
	
	/* 2. Предложения класса (M,N) */
	((#Brackets e.left1) e.1 (#E (e.name1) (e.pattern1)) e.2 (#Brackets e.right1))
	((#Brackets e.left2) e.3 (#E (e.name2) (e.pattern2)) e.4 (#Brackets e.right2)) 
	e.Tail = 
		<FastGen 
			(<FastGen-MeN
				((#Brackets e.left1) e.1 (#E (e.name1) (e.pattern1)) e.2 
				(#Brackets e.right1)) ((#Brackets e.left2) e.3 (#E (e.name2) 
				(e.pattern2)) e.4 (#Brackets e.right2)) 
			>)
			e.Tail
		>;
	
	/* 3. Предложения класса (M) */
	((#Brackets e.left1) e.1) ((#Brackets e.left2) e.2) e.Tail = 
		<FastGen 
			(<FastGen-M 
				<Check 
					((#Brackets e.left1) e.1) ((#Brackets e.left2) e.2)
				> 
				((#Brackets e.left1) e.1) ((#Brackets e.left2) e.2)
			>) 
			e.Tail
		>;
	
	/* 4. Все остальное */
	(e.1) (e.2) = ((#E ('Index') (#Alt (e.1) (e.2))));
}

FastGen-Terms {
	/* и там и там скобки, разбираем содержимое */
	((#Brackets e.1)) ((#Brackets e.2)) =
		(#Brackets <EraseBr <FastGen (e.1) (e.2)>>);
	
	/* с #E переменной - все #E переменная */
	((#E (e.name) (e.pattern))) ((s.type e.body)) =
		(#E ('Index') (#Alt ((#E (e.name) (e.pattern))) ((s.type e.body))));
		
	((s.type e.body)) ((#E (e.name) (e.pattern))) =
		(#E ('Index') (#Alt ((s.type e.body)) ((#E (e.name) (e.pattern)))));
	
	/* с #T переменной - все #T переменная */
	((#T (e.name) (e.pattern))) ((s.type e.body)) =
		(#T ('Index') (#Alt ((#T (e.name) (e.pattern))) ((s.type e.body))));
	
	((s.type e.body)) ((#T (e.name) (e.pattern))) =
		(#T ('Index') (#Alt ((s.type e.body)) ((#T (e.name) (e.pattern)))));
	
	/* #S переменная */
	((#S (e.name) (e.pattern))) ((#Brackets e.body)) =
		(#T ('Index') (#Alt ((#S (e.name) (e.pattern))) ((#Brackets e.body))));
	
	((#Brackets e.body)) ((#S (e.name) (e.pattern))) =
		(#T ('Index') (#Alt ((#Brackets e.body)) ((#S (e.name) (e.pattern)))));
	
	((#S (e.name) (e.pattern))) ((s.type e.body)) =
		(#S ('Index') (#Alt ((#S (e.name) (e.pattern))) ((s.type e.body))));
	
	((s.type e.body)) ((#S (e.name) (e.pattern))) =
		(#S ('Index') (#Alt ((s.type e.body)) ((#S (e.name) (e.pattern)))));
	
	/* Атом */
	((#Atom s.val)) ((#Atom s.val)) = (#Atom s.val);
	((#Atom s.val1)) ((#Atom s.val2)) = 
		(#S ('Index') (#Alt ((#Atom s.val1)) ((#Atom s.val2))));
}

FastGen-MeN {
	((#Brackets e.left1) e.1 (#E (e.name1) (e.pattern1)) e.2 (#Brackets e.right1))
	((#Brackets e.left2) e.3 (#E (e.name2) (e.pattern2)) e.4 (#Brackets e.right2)) 
	= 
		<EraseBr <FastGen ((#Brackets e.left1)) ((#Brackets e.left2)) > >
		<FastGen-MeN 
				(e.1 (#E ('Index') (e.pattern1)) e.2)
				(e.3 (#E ('Index') (e.pattern2)) e.4)
		>
		<EraseBr <FastGen ((#Brackets e.right1)) ((#Brackets e.right2)) > >
		;
	(e.1) (e.2) = (#E ('Index') (#Alt (e.1) (e.2)));
}

Check {
	((#Brackets e.left1) e.1) ((#Brackets e.left2) e.2) = <Check (e.1) (e.2)>;
	() () = 1;
	e.1 = 0;
}

FastGen-M {
	1 ((#Brackets e.left1) e.1) ((#Brackets e.left2) e.2) = 
		<FastGen-Terms ((#Brackets e.left1)) ((#Brackets e.left2))> 
		<FastGen-M 1 (e.1) (e.2)>;
	1 () () = ;
	0 (e.1) = (#E ('Index') (#Alt (e.1)));
}